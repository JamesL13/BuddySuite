#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, version 2 of the License (GPLv2).

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details at http://www.gnu.org/licenses/.

name: available_commands.py
date: Aug-21-2015
author: Stephen R. Bond
email: steve.bond@nih.gov
institute: Computational and Statistical Genomics Branch, Division of Intramural Research,
           National Human Genome Research Institute, National Institutes of Health
           Bethesda, MD
repository: https://github.com/biologyguy/BuddySuite
Â© license: Gnu General Public License, Version 2.0 (http://www.gnu.org/licenses/gpl.html)
derivative work: No

Description:
Dictionaries of the commands available for each Buddy Tool
"""
# flag, action, nargs, metavar, help, choices, type
sb_flags = {"add_feature": {"flag": "af",
                            "nargs": "*",
                            "help": "Add a feature (annotation) to selected sequence.s Args: <name>, "
                            "<location (start1-end1,start2-end2...)>, <strand (+|-)>, "
                            "<qualifiers (foo=bar,hello=world...)>, <regex_pattern>"},
            "ave_seq_length": {"flag": "asl",
                               "action": "append",
                               "nargs": "?",
                               "help": "Return the average length of all sequences. Pass in the word "
                                       "'clean' to remove gaps etc from the sequences before counting."},
            "back_transcribe": {"flag": "r2d",
                                "action": "store_true",
                                "help": "Convert RNA sequences to DNA"},
            "back_translate": {"flag": "btr",
                               "action": "append",
                               "nargs": "*",
                               "help": "Convert amino acid sequences into codons. Optionally, "
                                       "select mode by passing in ['random', 'r', 'optimized', 'o'] "
                                       "['human', 'h', 'mouse', 'm', 'yeast', 'y', 'ecoli', 'e']"},
            "bl2seq": {"flag": "bl2s",
                       "action": "store_true",
                       "help": "All-by-all blast among sequences using bl2seq. "
                               "Only Returns top hit from each search"},
            "blast": {"flag": "bl",
                      "action": "store",
                      "metavar": "<BLAST database",
                      "help": "BLAST your sequence file using common settings, "
                              "return the hits from blastdb"},
            "clean_seq": {"flag": "cs",
                          "action": "append",
                          "nargs": "?",
                          "help": "Strip out non-sequence characters, such as stops (*) and gaps (-). "
                                  "Pass in the word 'strict' to remove all characters except the "
                                  "unambiguous letter codes."},
            "combine_features": {"flag": "cf",
                                 "action": "store_true",
                                 "help": "Takes the features in two files and "
                                         "combines them for each sequence"},
            "complement": {"flag": "cmp",
                           "action": "store_true",
                           "help": "Return complement of nucleotide sequence"},
            "concat_seqs": {"flag": "cts",
                            "action": "append",
                            "nargs": "?",
                            "help": "Concatenate a bunch of sequences into a single solid string. Pass in "
                                    "the word 'clean' to remove stops, gaps, etc., from the sequences "
                                    "before concatenating."},
            "count_codons": {"flag": "cc",
                             "action": "store_true",
                             "help": "Return codon frequency statistics."},
            "count_residues": {"flag": "cr",
                                "action": "store_true",
                               "help": "Generate a table of sequence compositions."},
            "delete_features": {"flag": "df",
                                "action": "store",
                                "nargs": "+",
                                "metavar": "<regex pattern(s)>",
                                "help": "Remove specified features from all records"},
            "delete_large": {"flag": "dlg",
                             "action": "store",
                             "metavar": "<threshold (int)>",
                             "type": int,
                             "help": "Delete sequences with length above threshold"},
            "delete_metadata": {"flag": "dm",
                                "action": "store_true",
                                "help": "Remove meta-data from file (only id is retained)"},
            "delete_records": {"flag": "dr",
                               "action": "store",
                               "nargs": "+",
                               "metavar": "<regex pattern>",
                               "help": "Remove records from a file. The deleted IDs are sent to stderr"},
            "delete_repeats": {"flag": "drp",
                               "action": "append",
                               "nargs": "?",
                               "type": int,
                               "help": "Strip repeat records (ids and/or identical sequences. "
                                       "Optional, pass in an integer to specify # columns for deleted ids"},
            "delete_small": {"flag": "dsm",
                             "action": "store",
                             "metavar": "<threshold (int)>",
                             "type": int,
                             "help": "Delete sequences with length below threshold"},
            "extract_region": {"flag": "er",
                               "action": "store",
                               "nargs": 2,
                               "metavar": ("<start (int)>", "<end (int)>"),
                               "type": int,
                               "help": "Pull out sub-sequences"},
            "find_CpG": {"flag": "fcpg",
                         "action": "store_true",
                         "help": "Predict regions under strong purifying selection based on high CpG content"},
            "find_pattern": {"flag": "fp",
                             "action": "store",
                             "nargs": "+",
                             "metavar": "<regex pattern(s)>",
                             "help": "Search for subsequences, returning the start positions of all matches.  "},
            "find_repeats": {"flag": "frp",
                             "action": "append",
                             "nargs": "?",
                             "type": int,
                             "help": "Identify whether a file contains repeat sequences "
                                     "and/or sequence ids. The number of output columns "
                                     "can be modified by passing in an integer."},
            "find_restriction_sites": {"flag": "frs",
                                       "action": "append",
                                       "nargs": "*",
                                       "help": "Identify restriction sites. Args: enzymes "
                                               "[specific enzymes, commercial, all], max cuts, min cuts"},
            "guess_alphabet": {"flag": "ga",
                               "action": "store_true",
                               "help": "Return the alphabet type found in the input file"},
            "guess_format": {"flag": "gf",
                             "action": "store_true",
                             "help": "Guess the flat file format of the input file"},
            "hash_seq_ids": {"flag": "hsi",
                             "action": "append",
                             "nargs": "?",
                             "type": int,
                             "help": "Rename all the identifiers in a sequence list to a fixed length hash. "
                                     "Default 10; override by passing in an integer."},
            "insert_seq": {"flag": "is",
                           "action": "store",
                           "nargs": 2,
                           "metavar": ("<sequence>", "<start|end|index(int)>"),
                           "help": "Insert a sequence at the desired location"},
            "isoelectric_point": {"flag": "ip",
                                  "action": "store_true",
                                  "help": "Returns a list of isoelectric points for each protein "
                                          "sequence in the file."},
            "list_features": {"flag": "lf",
                              "action": "store_true",
                              "help": "Return a dictionary mapping sequence IDs to features."},
            "list_ids": {"flag": "li",
                         "action": "append",
                         "nargs": "?",
                         "type": int,
                         "metavar": "int (optional)",
                         "help": "Output all the sequence identifiers in a file. Optionally, pass in an integer to "
                                 "specify the # of columns to write"},
            "lowercase": {"flag": "lc",
                          "action": "store_true",
                          "help": "Convert all sequences to lowercase"},
            "map_features_dna2prot": {"flag": "fd2p",
                                      "action": "store_true",
                                      "help": "Take the features annotated onto nucleotide sequences "
                                              "and map to protein sequences. Both a protein and "
                                              "cDNA file must be passed in."},
            "map_features_prot2dna": {"flag": "fp2d",
                                      "action": "store_true",
                                      "help": "Take the features annotated onto protein sequences "
                                              "and map to cDNA sequences. Both a protein and "
                                              "cDNA file must be passed in"},
            "merge": {"flag": "mg",
                      "action": "store_true",
                      "help": "Group a bunch of seq files together"},
            "molecular_weight": {"flag": "mw",
                                 "action": "store_true",
                                 "help": "Computes the molecular weight of all of the sequences found in the input file."},
            "num_seqs": {"flag": "ns",
                         "action": "store_true",
                         "help": "Counts how many sequences are present in an input file"},
            "order_features_alphabetically": {"flag": "ofa",
                                              "action": "append",
                                              "nargs": "?",
                                              "help": "Change the output order of sequence features, based "
                                                      "on feature name. Pass in 'rev' to reverse order."},
            "order_features_by_position": {"flag": "ofp",
                                           "action": "append",
                                           "nargs": "?",
                                           "help": "Change the output order of sequence features, based on "
                                                   "sequence position. Pass in 'rev' to reverse order."},
            "order_ids": {"flag": "oi",
                          "action": "append",
                          "nargs": "?",
                          "help": "Sort all sequences by id in alpha-numeric order. Pass in the word 'rev' to reverse order"},
            "order_ids_randomly": {"flag": "oir",
                                   "action": "store_true",
                                   "help": "Randomly reorder the position of records in the file."},
            "pull_random_record": {"flag": "prr",
                                   "action": "append",
                                   "nargs": "?",
                                   "type": int,
                                   "metavar": "int (optional)",
                                   "help": "Extract random sequences. Optionally, pass in an integer to "
                                           "increase the number of sequences returned"},
            "pull_record_ends": {"flag": "pre",
                                 "action": "store",
                                 "nargs": 2, "metavar": ("<amount (int)>", "<front|rear>"),
                                 "help": "Get the ends (front or rear) of all sequences in a file."},
            "pull_records": {"flag": "pr",
                             "action": "store",
                             "nargs": "+",
                             "metavar": "<regex pattern(s)>",
                             "help": "Get all the records with ids containing a given string"},
            "purge": {"flag": "prg",
                      "action": "store",
                      "metavar": "Max BLAST score",
                      "type": int,
                      "help": "Delete sequences with high similarity"},
            "raw_seq": {"flag": "rs",
                        "action": "store_true",
                        "help": "Return line break separated sequences"},
            "rename_ids": {"flag": "ri",
                           "action": "store",
                           "metavar": ("<pattern>", "<substitution>"),
                           "nargs": 2,
                           "help": "Replace some pattern in ids with something else. "
                                   "Limit number of replacements with -p."},
            "reverse_complement": {"flag": "rc",
                                   "action": "store_true",
                                   "help": "Return reverse complement of nucleotide sequence"},
            "screw_formats": {"flag": "sf",
                              "action": "store",
                              "metavar": "<out_format>",
                              "help": "Change the file format to something else"},
            "select_frame": {"flag": "sfr",
                             "action": "store",
                             "metavar": "<frame (int)>",
                             "type": int,
                             "choices": [1, 2, 3],
                             "help": "Change the reading from of sequences by deleting characters off of the front"},
            "shuffle_seqs": {"flag": "ss",
                             "action": "store_true",
                             "help": "Shuffles the letters in all the sequences."},
            "split_by_taxa": {"flag": "sbt",
                              "action": "store",
                              "nargs": 2,
                              "metavar": ("<Split Pattern>", "<out dir>"),
                              "help": "Sort sequences into separate files based on taxa."},
            "split_to_files": {"flag": "stf",
                               "action": "store",
                               "metavar": "<out dir>",
                               "help": "Write individual files for each sequence"},
            "transcribe": {"flag": "d2r",
                           "action": "store_true",
                           "help": "Convert DNA sequences to RNA"},
            "translate": {"flag": "tr",
                          "action": "store_true",
                          "help": "Convert coding sequences into amino acid sequences"},
            "translate6frames": {"flag": "tr6",
                                 "action": "store_true",
                                 "help": "Translate nucleotide sequences into all six reading frames"},
            "uppercase": {"flag": "uc",
                          "action": "store_true",
                          "help": "Convert all sequences to uppercase"}}

sb_modifiers = {"alpha": {"flag": "a",
                          "action": "store",
                          "help": "If you want the file read with a specific alphabet"},
                "in_format": {"flag": "f",
                              "action": "store",
                              "help": "If SeqBuddy can't guess the file format, just specify it directly"},
                "in_place": {"flag": "i",
                             "action": "store_true",
                             "help": "Rewrite the input file in-place. Be careful!"},
                "out_format": {"flag": "o",
                               "action": "store",
                               "help": "If you want a specific format output"},
                "params": {"flag": "p",
                           "action": "store",
                           "nargs": "+",
                           "help": "Free form arguments for some functions"},
                "quiet": {"flag": "q",
                          "action": "store_true",
                          "help": "Suppress stderr messages"},
                "test": {"flag": "t",
                         "action": "store_true",
                         "help": "Run the function and return any stderr/stdout other than sequences"}}
